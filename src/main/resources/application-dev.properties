spring.application.name=projetoLoja
# Define o nome da aplicação no Spring Boot.


spring.datasource.url=jdbc:postgresql://localhost:5432/lojaVirtual?autoreconnect=true
# URL de conexão com o banco de dados PostgreSQL, incluindo o endereço, a porta e o nome do banco de dados.
spring.datasource.username=postgres
# Nome de usuário para conectar ao banco de dados.
spring.datasource.password=2636
# Senha para conectar ao banco de dados.
spring.datasource.driver-class-name=org.postgresql.Driver
# Especifica a classe do driver JDBC para PostgreSQL.
spring.jpa.hibernate.ddl-auto=none
# Configura o comportamento do Hibernate em relação ao schema do banco de dados. O valor 'update' faz com que o Hibernate atualize o schema conforme necessário sem perder dados.


spring.sql.init.platform=org.postgres
# Define a plataforma de banco de dados usada durante a inicialização SQL.


spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = true
# Usado para indicar ao Hibernate que ele deve usar metadados JDBC padrão.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
# Define o dialecto do banco de dados que o Hibernate deve usar para gerar SQL compatível com o PostgreSQL.
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# Especifica o dialecto do Hibernate específico para PostgreSQL.


server.servlet.context-path=/projetoLoja
# Define o contexto do servlet, ou seja, o prefixo do URL para acessar a aplicação.
spring.servlet.multipart.max-file-size=10000KB
# Define o tamanho máximo de arquivos para upload.
spring.servlet.multipart.max-request-size=10000KB
# Define o tamanho máximo de uma requisição que pode ser feita para upload.
spring.servlet.multipart.enabled=true
# Habilita o suporte a multipart/form-data, necessário para upload de arquivos.
server.compression.enabled=true
# Habilita a compressão da resposta HTTP para melhorar a performance.
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript, application/json
# Define os tipos de MIME que serão comprimidos nas respostas HTTP.
server.compression.min-response-size=1024
# Tamanho mínimo em bytes da resposta para que a compressão seja aplicada.


server.http2.enabled=true
# Habilita o suporte ao protocolo HTTP/2.
server.servlet.encoding.charset=utf-8
# Define o charset padrão como UTF-8.
server.servlet.encoding.enabled=true
# Habilita a configuração do charset de codificação.
server.servlet.encoding.force=true
# Força a codificação configurada em todas as respostas.
server.servlet.encoding.force-request=true
# Força a codificação configurada em todas as requisições.
server.servlet.encoding.force-response=true
# Força a codificação configurada em todas as respostas.


spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# Define o HikariCP como o pool de conexões JDBC.
spring.datasource.hikari.connection-timeout = 20000
# Define o tempo máximo em milissegundos que uma requisição aguarda por uma conexão do pool.
spring.datasource.hikari.minimum-idle= 200
# Define o número mínimo de conexões inativas que o HikariCP deve manter no pool.
spring.datasource.hikari.maximum-pool-size= 550
# Define o tamanho máximo do pool de conexões.
spring.jpa.show-sql=true
# Exibe as instruções SQL geradas pelo Hibernate no console.
spring.jpa.properties.hibernate.format_sql=true
# Formata o SQL exibido pelo Hibernate para torná-lo mais legível.
spring.jpa.generate-ddl=true
# Faz com que o Hibernate gere automaticamente o schema do banco de dados, se necessário.
server.port=8083
# Define a porta na qual a aplicação irá rodar.


spring.datasource.hikari.idle-timeout=10000
# Define o tempo máximo em milissegundos que uma conexão pode ficar ociosa no pool antes de ser removida.
spring.datasource.hikari.pool-name=PooHikari
# Define o nome do pool de conexões.
spring.datasource.dbcp2.pool-prepared-statements=true
# Habilita o cache de prepared statements.
spring.datasource.dbcp2.max-open-prepared-statements=550
# Define o número máximo de prepared statements que podem estar abertos ao mesmo tempo.
spring.datasource.hikari.auto-commit=false 
# Desativa o auto-commit para as conexões, exigindo commit explícito das transações.


spring.transaction.rollback-on-commit-failure=true
# Configura para que, em caso de falha no commit, ocorra um rollback da transação.
spring.jpa.properties.hibernate.jdbc.batch_size=4
# Define o número de operações que podem ser feitas em lote em uma única transação para melhorar a performance.
spring.jpa.properties.hibernate.order_inserts=true
# Habilita o reordenamento das operações de inserção para minimizar locks no banco de dados.
spring.jpa.properties.hibernate.order_updates=true
# Habilita o reordenamento das operações de atualização para minimizar locks no banco de dados.


server.tomcat.max-connections = 50000
# Define o número máximo de conexões simultâneas que o servidor Tomcat aceita.
server.tomcat.min-spare-threads=1000
# Define o número mínimo de threads que o servidor Tomcat deve manter disponíveis para processar requisições.
spring.session.jdbc.cleanup-cron = 0 0 4 * * *
# Define um cron job para limpeza de sessões armazenadas no banco de dados às 4:00 AM todos os dias.
spring.mvc.static-path-pattern=/resource/static/**
# Configura o padrão de URL para recursos estáticos (como arquivos JS, CSS, imagens) na pasta `resource/static`.


spring.flyway.enabled=false
# Desabilita o Flyway para migrações de banco de dados.
spring.flyway.baseline-on-migrate=true
# Configura o Flyway para considerar a versão base durante a migração, útil em bancos de dados existentes.
spring.flyway.locations=classpath:db.migration/
# Especifica o local onde estão os scripts de migração do Flyway.
spring.flyway.fail-on-missing-locations=true
# Faz com que o Flyway falhe se o diretório especificado para migrações não for encontrado.
spring.flyway.baseline-version=1
# Define a versão base do banco de dados para o Flyway.
spring.flyway.sql-migration-prefix=V
# Define o prefixo para os arquivos de migração SQL.
spring.flyway.sql-migration-separator=__
# Define o separador para os arquivos de migração SQL.
spring.flyway.sql-migration-suffixes=.sql
# Define o sufixo dos arquivos de migração SQL.
